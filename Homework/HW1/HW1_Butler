import datetime
import numpy

class Stock(object):
	def __init__(self, price, ticker):
		self.ticker = str(ticker)
		self.price = float(price)

	def __str__(self):
		return '%s: $%.2f per share' % (self.ticker, self.price)

	def __repr__(self):
		return self.__str__()


class MutualFund(object):
	def __init__(self, ticker, price = 1):
		self.ticker = str(ticker)
		self.price = float(price)

	def __str__(self):
		return '%s: $%.2f per share' % (self.ticker, self.price)

	def __repr__(self):
		return self.__str__()


class Portfolio(object):
	def __init__(self, cash = 0):
		self.cash = float(cash)
		self.stock = 'None owned.'
		self.mutual = 'None owned.'
		self.hist = []
		self.original_price = {}

	def __str__(self):
		return '''My portfolio:
		Cash: $%.2f
		Stocks: %s
		MutualFunds: %s''' % (self.cash, self.stock, '\n'.join(self.mutual))

	def __repr__(self):
		return self.__str__()

	def addCash(self, benjamins):
		print '$%.2f added to your portfolio.' % benjamins
		self.cash += float(benjamins)

	def withdrawCash(self, benjamins):
		if benjamins > self.cash:
			print 'Insufficient funds to withdraw $%.2f. Your current cash balance is $%.2f.' % (benjamins, self.cash)
		else:
			print '$%.2f withdrawn from your portfolio.' % benjamins
			self.cash -= float(benjamins)

	def genericBuyer(self, amount, investment, investment_type):
		total = investment.price * amount
		if total > self.cash:
			self.needMore(total - self.cash)
		else:
			self.cash -= total
			if investment_type == 'stock':
				if self.stock == 'None owned.':
					self.stock = {investment.ticker : amount}
				elif investment.ticker in self.stock:
					self.stock[investment.ticker] += amount
				else:
					self.stock[investment.ticker] = amount
			else:
				if self.mutual == 'None owned.':
					self.mutual = {investment.ticker : amount}
				elif investment.ticker in self.mutual:
					self.mutual[investment.ticker] += amount
				else:
					self.mutual[investment.ticker] = amount
			self.original_price[investment.ticker] = investment.price
			timestamp = datetime.datetime.now().strftime("%I:%M%p on %m/%d/%Y")
			self.hist.insert(0, '%s - Purchased %.2f shares of %s %s at $%.2f per share.' % (timestamp, amount, investment_type, investment.ticker, investment.price))
			print self.hist[0]

	# The following functions inform the user of errors.

	def needMore(self, diff):
		print 'Unable to complete transaction: The total price of the purchase exceeds the cash in your portfolio. You will need to add $%.2f more before making this purchase.' % diff

	def wrongType(self, investment, investment_type):
		print 'Error: %s is not an existing %s!' %(investment.ticker, investment_type)

	def dontOwn(self, investment_type):
		print 'Error: You have not invested in any %ss matching that name.' % investment_type

	def tooLittle(self, amount, investment_type, ticker):
		if investment_type == 'stock':
			print 'Error: You do not own %.2f shares of %s %s. The maximum you may sell is %.2f' % (amount, investment_type, ticker, self.stock[ticker])
		else:
			print 'Error: You do not own %.2f shares of %s %s. The maximum you may sell is %.2f' % (amount, investment_type, ticker, self.mutual[ticker])

	def buyStock(self, shares, existing_stock):
		if type(existing_stock) != Stock:
			self.wrongType(existing_stock, 'stock')
		else:
			return self.genericBuyer(shares, existing_stock, 'stock')

	def buyMutualFund(self, shares, existing_mf):
		if type(existing_mf) != MutualFund:
			self.wrongType(existing_mf, 'mutual fund')
		return self.genericBuyer(shares, existing_mf, 'mutual fund')

	def sellStock(self, name, amount):
		if name not in self.stock:
			self.dontOwn('stock')
		elif amount > self.stock[name]:
			self.tooLittle(amount, 'stock', name)
		else:
			sale_price = numpy.random.uniform(0.5, 1.5) * self.original_price[name]
			self.cash += sale_price * amount
			if amount < self.stock[name]:
				self.stock[name] -= amount
			else:
				del self.stock[name]
				del self.original_price[name]
			timestamp = datetime.datetime.now().strftime("%I:%M%p on %m/%d/%Y")
			self.hist.insert(0, '%s - Sold %.2f shares of stock %s at $%.2f per share.' % (timestamp, amount, name, sale_price))
			print self.hist[0]

	def sellMutualFund(self, name, amount):
		if name not in self.stock:
			self.dontOwn('mutual fund')
		elif amount > self.mutual[name]:
			self.tooLitte(amount, 'stock', name)
		else:
			sale_price = numpy.random.uniform(0.9,1.2)
			self.cash += sale_price * amount
			if amount < self.mutual[name]:
				self.stock[name] -= amount
			else:
				del self.mutual[name]
			timestamp = datetime.datetime.now().strftime("%I:%M%p on %m/%d/%Y")
			self.hist.insert(0, '%s - Sold %.2f shares of mutual fund %s at $%.2f per share.' % (timestamp, amount, name, sale_price))
			print self.hist[0]

	def history(self):
		return '\n'.join(self.history)





		




